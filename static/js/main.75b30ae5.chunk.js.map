{"version":3,"sources":["state/badge/reducer.tsx","state/badge/context.tsx","component/badgeImg.tsx","constant/api-path.tsx","config/index.ts","api/api-client.tsx","api/badge-service.tsx","state/pagequery/page.tsx","component/badgeInfiniteList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BadgesInitialState","badges","BadgeContext","React","createContext","useBadgeContext","useContext","BadgeListProvider","children","useState","badgesState","Provider","value","BadgeImg","require","badge","localStorage","getItem","webScraperOrder","dataImage","imageSrc","badgeSrc","useEffect","onLoad","e","loading","alt","gameHref","src","APIEndPoints","validateStatus","status","authorizedHttpClient","axiosInstance","this","axios","create","baseURL","EnvConfig","apiBaseUrl","headers","Accept","timeout","path","params","get","result","console","log","HttpClient","handleResponse","translateAxiosError","payload","config","post","delete","put","patch","response","data","code","Error","message","page","index","size","count","Promise","resolve","initialPageParam","useQueryPagingStatus","pageIndex","setPageIndex","pageSize","setPageSize","pageCount","setPageCount","badgeListStyle","maxWidth","margin","BadgeInfiniteList","badgeContext","isLoading","setIsLoading","hasMore","setHasMore","setBadges","items","setItems","onLoadMore","length","loadAllBadges","map","i","span","loadingBadges","pop","push","a","BadgeService","getBadgePaged","then","badgeRes","align","justify","pageStart","loadMore","loader","className","grid","gutter","xxl","style","bordered","dataSource","renderItem","item","Item","href","target","text","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75b30ae5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { BadgeAction, BadgeActionTypes, BadgeState } from \"./action\"\r\n\r\nexport const BadgesInitialState: BadgeState = {\r\n    badges: [\r\n    ],\r\n}\r\n\r\nexport function BadgeReducer(state: BadgeState, action: BadgeAction): BadgeState {\r\n    switch (action.type) {\r\n        case BadgeActionTypes.ADD_BADGE:\r\n            console.log(\"janana\", state);\r\n            return { badges: [...state.badges, { ...action.badge }] };\r\n        case BadgeActionTypes.REMOVE_BADGE:\r\n            return { badges: [...state.badges, { ...action.badge }] };\r\n        default:\r\n            return { badges: [...state.badges] };\r\n    }\r\n}","import React, { useContext, useState } from \"react\";\r\nimport { BadgeState } from \"./action\";\r\nimport { BadgesInitialState } from \"./reducer\";\r\n\r\nconst BadgeContext = React.createContext<BadgeState>(BadgesInitialState);\r\nconst useBadgeContext = ():BadgeState  => useContext(BadgeContext);\r\n\r\nexport const useBadgeListState = (): BadgeState => {\r\n    const context = React.useContext(BadgeContext);\r\n    if (undefined === context) {\r\n        throw new Error(\"Please use within BadgeListStateProvider\");\r\n    }\r\n    return context;\r\n};\r\n\r\nexport const BadgeListProvider = ({\r\n    children\r\n}: {\r\n    children: React.ReactNode;\r\n}) => {\r\n    const [badgesState, setBadges] = useState(BadgesInitialState);\r\n\r\n    // useeffect get badgesstate \r\n    return (\r\n        <BadgeContext.Provider value={badgesState}>\r\n            {children}\r\n        </BadgeContext.Provider>\r\n    );\r\n};\r\n\r\nexport default BadgeContext;\r\nexport { useBadgeContext }\r\n","import React, { useEffect, useReducer, useState } from 'react';\r\nimport { IBadge } from '../model/badge';\r\nimport { Image } from 'antd';\r\n\r\nconst imageToBase64 = require('image-to-base64');\r\n\r\ntype BadgeImgProps = {\r\n    badge: IBadge;\r\n}\r\n\r\nconst BadgeImg: React.FC<BadgeImgProps> = ({ badge }) => {\r\n    // start local data as locall data\r\n    const [dataImage, setDataImage] = useState(localStorage.getItem(badge.webScraperOrder));\r\n    // start badge as preview\r\n    const [badgeSrc, setBadgeSrc] = useState(dataImage ? dataImage : badge.imageSrc);\r\n\r\n    useEffect(() => {\r\n        // if local data is empty, call requets\r\n        //if (!dataImage) saveImgURL();\r\n    }, []);\r\n    \r\n    const onLoaded = (e: any) => {\r\n        return badge.imageSrc\r\n    }\r\n\r\n    //call request \r\n    const toDataURL = (url: string, callback: any) => {\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open('GET', url);\r\n        xhr.setRequestHeader(\"Access-Control-Allow-Origin\", \"*\");\r\n        xhr.onload = function () {\r\n            const reader = new FileReader();\r\n            reader.onloadend = function () {\r\n                callback(reader.result);\r\n            }\r\n            reader.readAsDataURL(xhr.response);\r\n        };\r\n        xhr.responseType = 'blob';\r\n        xhr.send();\r\n    }\r\n\r\n    // call request to download image and store\r\n    const saveImgURL = () => {\r\n        \r\n        //console.log(\"saving to cookie!\", badge.imageSrc);\r\n        imageToBase64(badge.imageSrc) // Image URL\r\n            .then(\r\n                (response: string) => {\r\n                    console.log(response); // \"iVBORw0KGgoAAAANSwCAIA...\"\r\n                    storeImgURL(\"data:image/png;base64,\"+response);\r\n                    setBadgeSrc(\"data:image/png;base64,\"+response);\r\n                }\r\n            )\r\n            .catch(\r\n                (error: any) => {\r\n                    //console.log(error); // Logs an error if there was one\r\n                }\r\n            )\r\n\r\n\r\n        // toDataURL(badge.imageSrc, (dataUrl: any) => {\r\n        //     console.log('RESULT:', dataUrl)\r\n\r\n        //     storeImgURL(dataUrl);\r\n        //     setBadgeSrc(dataUrl)\r\n        // });\r\n    }\r\n\r\n    // when downloaded\r\n    const storeImgURL = (dataUrl: string) => {\r\n        localStorage.setItem(badge.webScraperOrder, dataUrl)\r\n    }\r\n\r\n\r\n    return (\r\n        <Image\r\n            onLoad={onLoaded}\r\n            loading=\"lazy\"\r\n            alt={badge.gameHref}\r\n            src={badgeSrc}\r\n        />\r\n    );\r\n}\r\n\r\nexport default BadgeImg;\r\n","export const APIEndPoints = {\r\n    badge: \"/badge\"\r\n}","import { get } from \"lodash\";\r\n\r\nconst api = \"http://localhost:3001/api/v1\";\r\n\r\nclass Config {\r\n    public get apiBaseUrl(): string {\r\n        return  api || get(window, \"_env.API_BASE_URL\", \"\");\r\n    }\r\n}\r\n\r\nexport default new Config();\r\n","// eslint-disable-next-line max-classes-per-file\r\nimport axios, { AxiosError, AxiosInstance, AxiosResponse, AxiosRequestConfig } from \"axios\";\r\nimport { StatusCodes } from \"http-status-codes\";\r\nimport _ from \"lodash\";\r\nimport EnvConfig from \"../config\";\r\n\r\nexport type ApiService<P, R> = (payload?: P) => Promise<ApiResponse<R>>;\r\n\r\nexport const headersForBulkOperation = { \"pph-action\": \"bulk\" };\r\n\r\nexport const validateStatus = (status: number): boolean => {\r\n  return status >= 200 && status < 300;\r\n};\r\n\r\nexport interface ApiResponse<T> {\r\n  data?: T;\r\n}\r\n\r\nexport type RequestParam = {\r\n  [key: string]: any;\r\n};\r\n\r\nexport class HttpClient {\r\n  protected axiosInstance: AxiosInstance;\r\n\r\n  constructor() {\r\n    this.axiosInstance = axios.create({\r\n      baseURL: EnvConfig.apiBaseUrl,\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      validateStatus,\r\n      timeout: 20000\r\n    });\r\n  }\r\n\r\n  public get axios(): AxiosInstance {\r\n    return this.axiosInstance;\r\n  }\r\n\r\n  public async get<T>(path: string, params?: RequestParam): Promise<ApiResponse<T>> {\r\n    try {\r\n      const result = await this.axiosInstance.get<T>(path, { params });\r\n      console.log(path);\r\n      return HttpClient.handleResponse(result);\r\n    } catch (e) {\r\n      throw HttpClient.translateAxiosError(e);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line no-shadow\r\n  public async post<T, P>(path: string, payload: P, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {\r\n    try {\r\n      const result = await this.axiosInstance.post<P>(path, payload, config);\r\n      return HttpClient.handleResponse(result);\r\n    } catch (e) {\r\n      throw HttpClient.translateAxiosError(e);\r\n    }\r\n  }\r\n\r\n  public async delete(path: string): Promise<void> {\r\n    try {\r\n      await this.axiosInstance.delete<void>(path);\r\n    } catch (e) {\r\n      throw HttpClient.translateAxiosError(e);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line no-shadow\r\n  public async put<T, P>(path: string, payload: P, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {\r\n    try {\r\n      const result = await this.axiosInstance.put<T>(path, payload, config);\r\n      return HttpClient.handleResponse(result);\r\n    } catch (e) {\r\n      throw HttpClient.translateAxiosError(e);\r\n    }\r\n  }\r\n\r\n  public async patch<T, P>(path: string, payload: P): Promise<ApiResponse<T>> {\r\n    try {\r\n      const result = await this.axiosInstance.patch<T>(path, payload);\r\n      return HttpClient.handleResponse(result);\r\n    } catch (e) {\r\n      throw HttpClient.translateAxiosError(e);\r\n    }\r\n  }\r\n\r\n  private static handleResponse<T>(response: AxiosResponse): ApiResponse<T> {\r\n    return { data: response.data as T };\r\n  }\r\n\r\n  private static translateAxiosError(e: AxiosError): Error {\r\n    const { response } = e;\r\n    if (e.code === \"ECONNABORTED\") {\r\n      return new Error(e.message);\r\n    }\r\n    if (response != null) {\r\n      return new Error(response.data);\r\n    }\r\n    return new Error(\"Unable to contact the server at this time. Please try again later\");\r\n  }\r\n}\r\n\r\nexport const authorizedHttpClient = new HttpClient();","import { APIEndPoints } from \"../constant/api-path\";\r\nimport { IBadge } from \"../model/badge\";\r\nimport { PageParam } from \"../state/pagequery/page\";\r\nimport { authorizedHttpClient } from \"./api-client\";\r\n\r\ntype GetBadgeResponse = IBadge[];\r\ntype CreateBadgeResponse = {\r\n    badge: IBadge\r\n}\r\n\r\nclass BadgeService {\r\n    public async getBadge(): Promise<GetBadgeResponse> {\r\n        const response = await authorizedHttpClient.get<GetBadgeResponse>(\r\n            APIEndPoints.badge\r\n        )\r\n        console.log(response);\r\n        if(response && response.data) {\r\n            return response.data;\r\n        }\r\n        throw new Error(\"Get Badge service returns null.\");\r\n    }\r\n\r\n    public async getBadgePaged(page: PageParam): Promise<GetBadgeResponse> {\r\n        const response = await authorizedHttpClient.get<GetBadgeResponse>(\r\n            `${ APIEndPoints.badge }?pageIndex=${page.index}&pageSize=${page.size}&pageCount=${page.count}`\r\n        )\r\n        console.log(response);\r\n        if(response && response.data) {\r\n            return response.data;\r\n        }\r\n        throw new Error(\"Get Badge service returns null.\");\r\n    }\r\n    \r\n    public async createBadge(badge: IBadge): Promise<void> {\r\n        const response = await authorizedHttpClient.post<void, CreateBadgeResponse>(\r\n            APIEndPoints.badge, { badge }\r\n        )\r\n        console.log(response);\r\n        if(response) {\r\n            return Promise.resolve();\r\n        }\r\n        throw new Error(\"Get Badge service returns null.\");\r\n    }\r\n}\r\n\r\nexport default new BadgeService();\r\n","import { useState, useEffect } from 'react';\r\n\r\nexport interface PageParam {\r\n    index: number,\r\n    size: number,\r\n    count: number,\r\n}\r\n\r\nconst initialPageParam = {\r\n    index: 0,\r\n    size: 50,\r\n    count: 0,\r\n}\r\n\r\nconst useQueryPagingStatus = (page = initialPageParam) => {\r\n    const [pageIndex, setPageIndex] = useState(page.index);\r\n    const [pageSize, setPageSize] = useState(page.size);\r\n    const [pageCount, setPageCount] = useState(page.count);\r\n\r\n  return { pageIndex, pageSize, pageCount, setPageIndex, setPageSize, setPageCount };\r\n}\r\n\r\nexport default useQueryPagingStatus;","import React, { useEffect, useState } from 'react';\r\nimport { IBadge } from '../model/badge';\r\nimport { Button, Col, List, Row } from 'antd';\r\nimport { useBadgeContext } from '../state/badge/context';\r\nimport CSVLoader from './csvloader';\r\nimport BadgeImg from './badgeImg';\r\nimport BadgeCanvas from './badgeCanvas';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport * as CSS from 'csstype';\r\nimport BadgeService from '../api/badge-service';\r\nimport useQueryPagingStatus, { PageParam } from '../state/pagequery/page';\r\nimport { BadgeActionTypes, simulateHttpRequest } from '../state/badge/action';\r\n\r\n\r\nconst badgeListStyle: CSS.Properties = {\r\n    maxWidth: \"60em\",\r\n    margin: \"auto\",\r\n};\r\n\r\nconst BadgeInfiniteList: React.FC = () => {\r\n    const badgeContext = useBadgeContext();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const { pageIndex, pageSize, pageCount, setPageIndex, setPageSize, setPageCount } = useQueryPagingStatus();\r\n    \r\n\r\n    const allBadges: IBadge[] = [];\r\n    const [hasMore, setHasMore] = useState(false);\r\n    const [badges, setBadges] = useState(allBadges);\r\n\r\n    const onLoadClick = () => {\r\n        loadMoreBadges();\r\n        console.log(\"state\", badgeContext);\r\n        console.log(\"badges\", badges);\r\n    }\r\n    const [items, setItems] = useState<any[]>([]);\r\n    \r\n    useEffect(() => {\r\n        // load badge context\r\n        if(isLoading || hasMore || pageIndex > 0) return;\r\n        onLoadMore(0);\r\n    }, []);\r\n    \r\n    useEffect(() => {\r\n        console.log(\"badgeContext changed: \", badgeContext);\r\n        if (badgeContext.badges && badgeContext.badges.length > 0) setHasMore(false);\r\n        loadAllBadges();\r\n    }, [badgeContext]);\r\n\r\n    useEffect(() => {\r\n        console.log(\"badges changed: \", badges);\r\n        badges.map((badge, i) => {\r\n            //console.log(\"badge: \", badge);\r\n            setItems([...items, <Col span={4.5}><BadgeImg badge={ badge }/></Col>]);\r\n        })\r\n    }, [badges]);\r\n\r\n\r\n    const loadAllBadges = () => {\r\n        const loadingBadges: IBadge[] = [];\r\n        for (let i = 0; i < badgeContext.badges.length; i++) {\r\n            const badge = badgeContext.badges.pop();\r\n            if (!!badge) {\r\n                loadingBadges.push(badge);\r\n            }\r\n        };        \r\n        if (loadingBadges.length) setBadges([...badges, ...loadingBadges]);\r\n        setPageCount(pageCount + 1);\r\n    }\r\n\r\n    const loadMoreBadges = (amount = 1000) => {\r\n        const loadingBadges: IBadge[] = [];\r\n        for (let i = 0; i < amount; i++) {\r\n            const badge = badgeContext.badges.pop();\r\n            if (badge) {\r\n                loadingBadges.push(badge);\r\n            }\r\n        };\r\n        if (loadingBadges.length) setBadges([...badges, ...loadingBadges]);\r\n        //BadgeRepo.bulkCreateBadge(loadingBadges);\r\n    }\r\n\r\n    const loadBadge = async () => {\r\n        const badge = await BadgeService.getBadge();\r\n        console.log(\"janan\", badge);\r\n    } \r\n\r\n    const createBadge = async () => {\r\n        const badge = await BadgeService.createBadge({ \r\n            webScraperOrder: \"janan\",\r\n            gameId: \"janan\",\r\n            step: \"janan\",\r\n            gameHref: \"janan\",\r\n            imageSrc: \"janan\",\r\n            text: \"janan\" });\r\n        console.log(\"janan\", badge);\r\n    }       \r\n\r\n    const onLoadMoretest = (pageIndex: number) => {\r\n        console.log(\"loading, isLoading\", isLoading);\r\n        console.log(\"loading, hasMore\", hasMore);\r\n        loadBadgesPagedDB(pageIndex);\r\n        if(isLoading) {\r\n            return;\r\n        }\r\n        if(!hasMore) {\r\n            setIsLoading(false);\r\n        }\r\n    } \r\n\r\n    const onLoadMore = async (pageIndex: number) => {\r\n        if(isLoading) return;\r\n        setHasMore(false);\r\n        const page: PageParam = {\r\n            count: pageCount,\r\n            index: pageIndex,\r\n            size: pageSize\r\n        }\r\n        setIsLoading(true);\r\n        await BadgeService.getBadgePaged(page)\r\n            .then((badgeRes) => {\r\n                if(badgeRes) {\r\n                    if (badgeRes.length) setBadges([...badges, ...badgeRes]);\r\n\r\n                }\r\n                setIsLoading(false);\r\n                setHasMore(true);\r\n            });\r\n    } \r\n\r\n    const startPull = async () => {\r\n        await loadBadgesPagedDB();\r\n    } \r\n\r\n    const loadBadgesPagedDB = async (pageI = 0) => {\r\n        console.log(\"isLoading\", isLoading);\r\n        console.log(\"hasMore\", hasMore);\r\n        console.log(\"pageI\", pageI);\r\n        if (isLoading || hasMore) return;\r\n        const page: PageParam = {\r\n            count: pageCount,\r\n            index: pageI,\r\n            size: pageSize\r\n        }\r\n        const data = await BadgeService.getBadgePaged(page);\r\n        if (data.length) setBadges([...badges, ...data]);\r\n        badgeContext.badges.push(...data);\r\n        // data.forEach((badge) => {        \r\n        //     setHasMore(true);\r\n        //     badgeContext.badges.push(badge);\r\n        //     simulateHttpRequest( {\r\n        //         type: BadgeActionTypes.ADD_BADGE,\r\n        //         badge\r\n        //       });\r\n        // })\r\n        console.log(data);\r\n        setPageIndex(pageIndex + 1);\r\n        setHasMore(true);\r\n    }\r\n\r\n    return (\r\n        <Row align=\"bottom\" justify=\"center\">\r\n            <Col>\r\n                <Row>\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={onLoadMore}\r\n                        hasMore={hasMore}\r\n                        loader={<div className=\"loader\" key={0}>Loading ...</div>}\r\n                    >\r\n                        <List\r\n                            grid={{\r\n                                gutter: 0,\r\n                                xxl: 6,\r\n                            }}\r\n                            style={badgeListStyle}\r\n                            bordered={true}\r\n                            dataSource={badges}\r\n                            renderItem={item => (\r\n                            <List.Item key={item.webScraperOrder}>\r\n                                <br />\r\n                                <br />\r\n                                <BadgeImg badge={item} />\r\n                                <br />\r\n                                <a href={item.gameHref} target=\"_blank\">{item.text}</a>\r\n                            </List.Item>\r\n                        )}\r\n                        >\r\n                        </List>\r\n                    </InfiniteScroll>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default BadgeInfiniteList;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport BadgeList from './component/badgeList';\nimport { BadgeListProvider } from './state/badge/context';\nimport BadgeInfiniteList from './component/badgeInfiniteList';\n\nconst App: React.FC = () => {\n  return (\n    <BadgeListProvider>\n      <div className=\"App\">\n        <div>\n          <BadgeInfiniteList></BadgeInfiniteList>\n        </div>\n      </div>\n    </BadgeListProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}